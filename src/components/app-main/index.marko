<div class="container">
  <main>
    <form id="form" hx-get="/contents" hx-target="#content" hx-swap="outerHTML">
      <input type="text" name="site" id="site">
      <button>Load Content</button>
    </form>
    <button id="nextButton">
      Next
    </button>
    <button id="prevButton">
      Previous
    </button>
    <button id="speakButton">
      Speak
    </button>
    <button id="cancelButton">
      Cancel
    </button>
    <div id="content">
      ÊàëÂñúÊ¨¢‰∏ùÁîúÁîú
    </div>
    <script>
      function triggerVoice() {
        function getVoices() {
          let voices = speechSynthesis.getVoices();
          if (!voices.length) {
            // some time the voice will not be initialized so we can call speak with empty string
            // this will initialize the voices
            let utterance = new SpeechSynthesisUtterance("");
            speechSynthesis.speak(utterance);
            voices = speechSynthesis.getVoices();
          }
          return voices;
        }

        function speak(text, voice, rate, pitch, volume) {
          // create a SpeechSynthesisUtterance to configure the how text to be spoken
          let speakData = new SpeechSynthesisUtterance();
          speakData.volume = volume; // From 0 to 1
          speakData.rate = rate; // From 0.1 to 10
          speakData.pitch = pitch; // From 0 to 2
          speakData.text = text;
          speakData.lang = "zh";
          speakData.voice = voice;

          // pass the SpeechSynthesisUtterance to speechSynthesis.speak to start speaking
          speechSynthesis.cancel();
          speechSynthesis.speak(speakData);
        }

        if ("speechSynthesis" in window) {
          let voices = getVoices();
          let rate = 1,
            pitch = 1,
            volume = 1;
          let text = document.getElementById("content")?.innerHTML;

          console.log(voices);
          console.log("text", text);

          speak(
            text,
            voices?.find((v) => v.lang === "zh-CN"),
            rate,
            pitch,
            volume,
          );
        } else {
          console.log(" Speech Synthesis Not Supported üòû");
        }
      }
      document.getElementById("nextButton").addEventListener("click", () => {
        const doc = document.getElementById("site");
        const url = doc.value;
        const startIndex = url.lastIndexOf("/") + 1;
        const endIndex = url.lastIndexOf(".");
        let curr = +url.slice(startIndex, endIndex);
        curr++;
        console.log(curr);
        // doc.setAttribute(
        //   "value",
        //   `https://www.hetushu.com/book/171/${curr}.html`,
        // );
        doc.value = `${url.slice(0, startIndex)}/${curr}.html`;
      });
      document.getElementById("prevButton").addEventListener("click", () => {
        const doc = document.getElementById("site");
        const url = doc.value;
        const startIndex = url.lastIndexOf("/") + 1;
        const endIndex = url.lastIndexOf(".");
        let curr = +url.slice(startIndex, endIndex);
        curr--;
        console.log(curr);
        doc.value = `https://www.hetushu.com/book/171/${curr}.html`;
      });
      document
        .getElementById("cancelButton")
        .addEventListener("click", function () {
          if ("speechSynthesis" in window) {
            speechSynthesis.cancel();
          }
        });
      document
        .getElementById("speakButton")
        .addEventListener("click", function () {
          triggerVoice();
        });
    </script>
    <script
      src="https://unpkg.com/htmx.org@1.9.10"
      integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC"
      crossorigin="anonymous"
    />
  </main>
</div>
style {
  main {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-size: clamp(1em, 2vw, 2em);
    padding: 1em;
    box-sizing: border-box;
    min-height: 100vh;
    width: 100%;
    gap: 24px;
  }
  #content {
    text-align: center;
    color: white;
    font-size: 30px;
  }
  button {
    padding: 8px;
    font-size: 24px;
    border-radius: 8px;
  }
  #form {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 16px;
  }
  input {
    font-size: 24px;
    padding: 8px;
    border-radius: 8px;
  }
  p {
    margin: 0;
  }
}
